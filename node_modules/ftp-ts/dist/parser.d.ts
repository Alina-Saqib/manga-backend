/// <reference types="node" />
import { Writable as WritableStream } from "stream";
import { IListingElement } from "./connection";
export default class Parser extends WritableStream {
    static parseFeat(text: string): string[];
    private _debug?;
    private _buffer;
    constructor(options: {
        debug?: (output: string) => void;
    });
    _write(chunk: Buffer, encoding: string, cb: () => void): Promise<void>;
}
export interface IListMlsx {
    size?: string;
    modify?: string;
    create?: string;
    /**
     * cdir
     */
    type?: "cdir" | "pdir" | "dir" | "file" | `OS.${string}=${string}`;
    unique?: string;
    perm?: string;
    lang?: string;
    mediaType?: string;
    charset?: string;
    name: string;
    [k: string]: string | undefined;
}
export declare function parseMlsxEntry(line: string): string | (IListingElement & {
    mlsx: IListMlsx;
});
export declare function parseListEntry(line: string): string | IListingElement | null;
